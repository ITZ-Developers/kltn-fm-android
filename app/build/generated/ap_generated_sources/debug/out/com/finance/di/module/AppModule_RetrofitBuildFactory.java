// Generated by Dagger (https://dagger.dev).
package com.finance.di.module;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_RetrofitBuildFactory implements Factory<Retrofit> {
  private final AppModule module;

  private final Provider<OkHttpClient> clientProvider;

  private final Provider<String> urlProvider;

  public AppModule_RetrofitBuildFactory(AppModule module, Provider<OkHttpClient> clientProvider,
      Provider<String> urlProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
    this.urlProvider = urlProvider;
  }

  @Override
  public Retrofit get() {
    return retrofitBuild(module, clientProvider.get(), urlProvider.get());
  }

  public static AppModule_RetrofitBuildFactory create(AppModule module,
      Provider<OkHttpClient> clientProvider, Provider<String> urlProvider) {
    return new AppModule_RetrofitBuildFactory(module, clientProvider, urlProvider);
  }

  public static Retrofit retrofitBuild(AppModule instance, OkHttpClient client, String url) {
    return Preconditions.checkNotNullFromProvides(instance.retrofitBuild(client, url));
  }
}
