// Generated by Dagger (https://dagger.dev).
package com.finance.di.component;

import android.content.Context;
import com.finance.data.Repository;
import com.finance.di.module.FragmentModule;
import com.finance.di.module.FragmentModule_ProvideAccountFragmentViewModelFactory;
import com.finance.di.module.FragmentModule_ProvideActivityFragmentViewModelFactory;
import com.finance.di.module.FragmentModule_ProvideFavouriteFragmentViewModelFactory;
import com.finance.di.module.FragmentModule_ProvideHomeFragmentViewModelFactory;
import com.finance.di.module.FragmentModule_ProvideProjectFragmentViewModelFactory;
import com.finance.di.module.FragmentModule_ProvideTaskFragmentViewModelFactory;
import com.finance.di.module.FragmentModule_ProvideTokenFactory;
import com.finance.ui.base.BaseFragment_MembersInjector;
import com.finance.ui.fragment.account.AccountFragment;
import com.finance.ui.fragment.account.AccountFragmentViewModel;
import com.finance.ui.fragment.home.HomeFragment;
import com.finance.ui.fragment.home.HomeFragmentViewModel;
import com.finance.ui.fragment.key.KeyFragment;
import com.finance.ui.fragment.key.KeyFragmentViewModel;
import com.finance.ui.fragment.project.ProjectFragment;
import com.finance.ui.fragment.project.ProjectFragmentViewModel;
import com.finance.ui.fragment.statistics.StatisticsFragment;
import com.finance.ui.fragment.statistics.StatisticsFragmentViewModel;
import com.finance.ui.fragment.task.TaskFragment;
import com.finance.ui.fragment.task.TaskFragmentViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerFragmentComponent implements FragmentComponent {
  private Provider<Repository> getRepositoryProvider;

  private Provider<Context> getContextProvider;

  private Provider<AccountFragmentViewModel> provideAccountFragmentViewModelProvider;

  private Provider<String> provideTokenProvider;

  private Provider<HomeFragmentViewModel> provideHomeFragmentViewModelProvider;

  private Provider<StatisticsFragmentViewModel> provideActivityFragmentViewModelProvider;

  private Provider<KeyFragmentViewModel> provideFavouriteFragmentViewModelProvider;

  private Provider<TaskFragmentViewModel> provideTaskFragmentViewModelProvider;

  private Provider<ProjectFragmentViewModel> provideProjectFragmentViewModelProvider;

  private DaggerFragmentComponent(FragmentModule fragmentModuleParam,
      AppComponent appComponentParam) {

    initialize(fragmentModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final FragmentModule fragmentModuleParam,
      final AppComponent appComponentParam) {
    this.getRepositoryProvider = new com_finance_di_component_AppComponent_getRepository(appComponentParam);
    this.getContextProvider = new com_finance_di_component_AppComponent_getContext(appComponentParam);
    this.provideAccountFragmentViewModelProvider = DoubleCheck.provider(FragmentModule_ProvideAccountFragmentViewModelFactory.create(fragmentModuleParam, getRepositoryProvider, getContextProvider));
    this.provideTokenProvider = DoubleCheck.provider(FragmentModule_ProvideTokenFactory.create(fragmentModuleParam, getRepositoryProvider));
    this.provideHomeFragmentViewModelProvider = DoubleCheck.provider(FragmentModule_ProvideHomeFragmentViewModelFactory.create(fragmentModuleParam, getRepositoryProvider, getContextProvider));
    this.provideActivityFragmentViewModelProvider = DoubleCheck.provider(FragmentModule_ProvideActivityFragmentViewModelFactory.create(fragmentModuleParam, getRepositoryProvider, getContextProvider));
    this.provideFavouriteFragmentViewModelProvider = DoubleCheck.provider(FragmentModule_ProvideFavouriteFragmentViewModelFactory.create(fragmentModuleParam, getRepositoryProvider, getContextProvider));
    this.provideTaskFragmentViewModelProvider = DoubleCheck.provider(FragmentModule_ProvideTaskFragmentViewModelFactory.create(fragmentModuleParam, getRepositoryProvider, getContextProvider));
    this.provideProjectFragmentViewModelProvider = DoubleCheck.provider(FragmentModule_ProvideProjectFragmentViewModelFactory.create(fragmentModuleParam, getRepositoryProvider, getContextProvider));
  }

  @Override
  public void inject(AccountFragment accountFragment) {
    injectAccountFragment(accountFragment);
  }

  @Override
  public void inject(HomeFragment homeFragment) {
    injectHomeFragment(homeFragment);
  }

  @Override
  public void inject(StatisticsFragment activityFragment) {
    injectStatisticsFragment(activityFragment);
  }

  @Override
  public void inject(KeyFragment favouriteFragment) {
    injectKeyFragment(favouriteFragment);
  }

  @Override
  public void inject(TaskFragment fragment) {
    injectTaskFragment(fragment);
  }

  @Override
  public void inject(ProjectFragment fragment) {
    injectProjectFragment(fragment);
  }

  private AccountFragment injectAccountFragment(AccountFragment instance) {
    BaseFragment_MembersInjector.injectViewModel(instance, provideAccountFragmentViewModelProvider.get());
    BaseFragment_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private HomeFragment injectHomeFragment(HomeFragment instance) {
    BaseFragment_MembersInjector.injectViewModel(instance, provideHomeFragmentViewModelProvider.get());
    BaseFragment_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private StatisticsFragment injectStatisticsFragment(StatisticsFragment instance) {
    BaseFragment_MembersInjector.injectViewModel(instance, provideActivityFragmentViewModelProvider.get());
    BaseFragment_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private KeyFragment injectKeyFragment(KeyFragment instance) {
    BaseFragment_MembersInjector.injectViewModel(instance, provideFavouriteFragmentViewModelProvider.get());
    BaseFragment_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TaskFragment injectTaskFragment(TaskFragment instance) {
    BaseFragment_MembersInjector.injectViewModel(instance, provideTaskFragmentViewModelProvider.get());
    BaseFragment_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ProjectFragment injectProjectFragment(ProjectFragment instance) {
    BaseFragment_MembersInjector.injectViewModel(instance, provideProjectFragmentViewModelProvider.get());
    BaseFragment_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  public static final class Builder {
    private FragmentModule fragmentModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder fragmentModule(FragmentModule fragmentModule) {
      this.fragmentModule = Preconditions.checkNotNull(fragmentModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public FragmentComponent build() {
      Preconditions.checkBuilderRequirement(fragmentModule, FragmentModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerFragmentComponent(fragmentModule, appComponent);
    }
  }

  private static final class com_finance_di_component_AppComponent_getRepository implements Provider<Repository> {
    private final AppComponent appComponent;

    com_finance_di_component_AppComponent_getRepository(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Repository get() {
      return Preconditions.checkNotNullFromComponent(appComponent.getRepository());
    }
  }

  private static final class com_finance_di_component_AppComponent_getContext implements Provider<Context> {
    private final AppComponent appComponent;

    com_finance_di_component_AppComponent_getContext(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNullFromComponent(appComponent.getContext());
    }
  }
}
