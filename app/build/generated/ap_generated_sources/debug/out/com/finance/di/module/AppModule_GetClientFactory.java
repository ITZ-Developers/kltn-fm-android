// Generated by Dagger (https://dagger.dev).
package com.finance.di.module;

import com.finance.data.remote.AuthInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_GetClientFactory implements Factory<OkHttpClient> {
  private final AppModule module;

  private final Provider<AuthInterceptor> authInterceptorProvider;

  public AppModule_GetClientFactory(AppModule module,
      Provider<AuthInterceptor> authInterceptorProvider) {
    this.module = module;
    this.authInterceptorProvider = authInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return getClient(module, authInterceptorProvider.get());
  }

  public static AppModule_GetClientFactory create(AppModule module,
      Provider<AuthInterceptor> authInterceptorProvider) {
    return new AppModule_GetClientFactory(module, authInterceptorProvider);
  }

  public static OkHttpClient getClient(AppModule instance, AuthInterceptor authInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.getClient(authInterceptor));
  }
}
