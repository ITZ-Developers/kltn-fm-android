// Generated by Dagger (https://dagger.dev).
package com.finance.di.module;

import android.app.Application;
import com.finance.data.prefs.PreferencesService;
import com.finance.data.remote.AuthInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProviceAuthInterceptorFactory implements Factory<AuthInterceptor> {
  private final AppModule module;

  private final Provider<PreferencesService> appPreferencesServiceProvider;

  private final Provider<Application> applicationProvider;

  public AppModule_ProviceAuthInterceptorFactory(AppModule module,
      Provider<PreferencesService> appPreferencesServiceProvider,
      Provider<Application> applicationProvider) {
    this.module = module;
    this.appPreferencesServiceProvider = appPreferencesServiceProvider;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public AuthInterceptor get() {
    return proviceAuthInterceptor(module, appPreferencesServiceProvider.get(), applicationProvider.get());
  }

  public static AppModule_ProviceAuthInterceptorFactory create(AppModule module,
      Provider<PreferencesService> appPreferencesServiceProvider,
      Provider<Application> applicationProvider) {
    return new AppModule_ProviceAuthInterceptorFactory(module, appPreferencesServiceProvider, applicationProvider);
  }

  public static AuthInterceptor proviceAuthInterceptor(AppModule instance,
      PreferencesService appPreferencesService, Application application) {
    return Preconditions.checkNotNullFromProvides(instance.proviceAuthInterceptor(appPreferencesService, application));
  }
}
