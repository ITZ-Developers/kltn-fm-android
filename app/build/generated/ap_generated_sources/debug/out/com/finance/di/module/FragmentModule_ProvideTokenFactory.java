// Generated by Dagger (https://dagger.dev).
package com.finance.di.module;

import com.finance.data.Repository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FragmentModule_ProvideTokenFactory implements Factory<String> {
  private final FragmentModule module;

  private final Provider<Repository> repositoryProvider;

  public FragmentModule_ProvideTokenFactory(FragmentModule module,
      Provider<Repository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public String get() {
    return provideToken(module, repositoryProvider.get());
  }

  public static FragmentModule_ProvideTokenFactory create(FragmentModule module,
      Provider<Repository> repositoryProvider) {
    return new FragmentModule_ProvideTokenFactory(module, repositoryProvider);
  }

  public static String provideToken(FragmentModule instance, Repository repository) {
    return Preconditions.checkNotNullFromProvides(instance.provideToken(repository));
  }
}
