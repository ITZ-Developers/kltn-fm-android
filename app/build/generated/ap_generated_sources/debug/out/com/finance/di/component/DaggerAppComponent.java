// Generated by Dagger (https://dagger.dev).
package com.finance.di.component;

import android.app.Application;
import android.content.Context;
import com.finance.MVVMApplication;
import com.finance.data.AppRepository;
import com.finance.data.AppRepository_Factory;
import com.finance.data.Repository;
import com.finance.data.prefs.AppPreferencesService;
import com.finance.data.prefs.AppPreferencesService_Factory;
import com.finance.data.prefs.PreferencesService;
import com.finance.data.remote.ApiService;
import com.finance.data.remote.AuthInterceptor;
import com.finance.di.module.AppModule;
import com.finance.di.module.AppModule_ApiServiceFactory;
import com.finance.di.module.AppModule_GetClientFactory;
import com.finance.di.module.AppModule_ProviceAuthInterceptorFactory;
import com.finance.di.module.AppModule_ProvideBaseUrlFactory;
import com.finance.di.module.AppModule_ProvideContextFactory;
import com.finance.di.module.AppModule_ProvideDataManagerFactory;
import com.finance.di.module.AppModule_ProvideGsonFactory;
import com.finance.di.module.AppModule_ProvidePreferenceNameFactory;
import com.finance.di.module.AppModule_ProvidePreferencesServiceFactory;
import com.finance.di.module.AppModule_RetrofitBuildFactory;
import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<String> providePreferenceNameProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<AppPreferencesService> appPreferencesServiceProvider;

  private Provider<PreferencesService> providePreferencesServiceProvider;

  private Provider<AuthInterceptor> proviceAuthInterceptorProvider;

  private Provider<OkHttpClient> getClientProvider;

  private Provider<String> provideBaseUrlProvider;

  private Provider<Retrofit> retrofitBuildProvider;

  private Provider<ApiService> apiServiceProvider;

  private Provider<AppRepository> appRepositoryProvider;

  private Provider<Repository> provideDataManagerProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application applicationParam) {

    initialize(appModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application applicationParam) {
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = DoubleCheck.provider(AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider));
    this.providePreferenceNameProvider = DoubleCheck.provider(AppModule_ProvidePreferenceNameFactory.create(appModuleParam));
    this.provideGsonProvider = DoubleCheck.provider(AppModule_ProvideGsonFactory.create(appModuleParam));
    this.appPreferencesServiceProvider = AppPreferencesService_Factory.create(provideContextProvider, providePreferenceNameProvider, provideGsonProvider);
    this.providePreferencesServiceProvider = DoubleCheck.provider(AppModule_ProvidePreferencesServiceFactory.create(appModuleParam, appPreferencesServiceProvider));
    this.proviceAuthInterceptorProvider = DoubleCheck.provider(AppModule_ProviceAuthInterceptorFactory.create(appModuleParam, providePreferencesServiceProvider, applicationProvider));
    this.getClientProvider = DoubleCheck.provider(AppModule_GetClientFactory.create(appModuleParam, proviceAuthInterceptorProvider));
    this.provideBaseUrlProvider = DoubleCheck.provider(AppModule_ProvideBaseUrlFactory.create(appModuleParam));
    this.retrofitBuildProvider = DoubleCheck.provider(AppModule_RetrofitBuildFactory.create(appModuleParam, getClientProvider, provideBaseUrlProvider));
    this.apiServiceProvider = DoubleCheck.provider(AppModule_ApiServiceFactory.create(appModuleParam, retrofitBuildProvider));
    this.appRepositoryProvider = AppRepository_Factory.create(apiServiceProvider, providePreferencesServiceProvider);
    this.provideDataManagerProvider = DoubleCheck.provider(AppModule_ProvideDataManagerFactory.create(appModuleParam, appRepositoryProvider));
  }

  @Override
  public void inject(MVVMApplication app) {
  }

  @Override
  public Repository getRepository() {
    return provideDataManagerProvider.get();
  }

  @Override
  public Context getContext() {
    return provideContextProvider.get();
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }
}
