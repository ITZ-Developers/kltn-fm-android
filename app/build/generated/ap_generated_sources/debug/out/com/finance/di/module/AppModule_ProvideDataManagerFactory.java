// Generated by Dagger (https://dagger.dev).
package com.finance.di.module;

import com.finance.data.AppRepository;
import com.finance.data.Repository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideDataManagerFactory implements Factory<Repository> {
  private final AppModule module;

  private final Provider<AppRepository> appRepositoryProvider;

  public AppModule_ProvideDataManagerFactory(AppModule module,
      Provider<AppRepository> appRepositoryProvider) {
    this.module = module;
    this.appRepositoryProvider = appRepositoryProvider;
  }

  @Override
  public Repository get() {
    return provideDataManager(module, appRepositoryProvider.get());
  }

  public static AppModule_ProvideDataManagerFactory create(AppModule module,
      Provider<AppRepository> appRepositoryProvider) {
    return new AppModule_ProvideDataManagerFactory(module, appRepositoryProvider);
  }

  public static Repository provideDataManager(AppModule instance, AppRepository appRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideDataManager(appRepository));
  }
}
