// Generated by Dagger (https://dagger.dev).
package com.finance.di.component;

import android.content.Context;
import com.finance.data.Repository;
import com.finance.di.module.ActivityModule;
import com.finance.di.module.ActivityModule_ProvideCategoryDetailsViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideCategoryViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideChangePasswordViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideCreateTransactionViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideDebitDetailViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideDebitUpdateViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideDebitViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideDepartmentDetailsViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideDepartmentViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideDetailStatisticsViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideDetailTransactionViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideDocumentViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideForgetPasswordViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideGroupServiceDetailViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideGroupServiceViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideGroupTransactionDetailViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideGroupTransactionViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideImageViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideKeyDetailsViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideKeyFilterViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideKeyGroupDetailsViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideKeyGroupViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideKeyInfoViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideMainViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideNotificationViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideOrganizationDetailViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideOrganizationViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideProjectDetailViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideProjectViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideResetPasswordViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideServiceDetailViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideServiceScheduleViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideServiceViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideSignInViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideSubTaskViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideTagDetailViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideTagViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideTaskCreateUpdateViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideTaskDetailViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideTaskFilterViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideTaskViewModelFactory;
import com.finance.di.module.ActivityModule_ProvideTokenFactory;
import com.finance.di.module.ActivityModule_ProvideUpdateAccountViewModelFactory;
import com.finance.ui.base.BaseActivity_MembersInjector;
import com.finance.ui.category.CategoryActivity;
import com.finance.ui.category.CategoryViewModel;
import com.finance.ui.category.details.CategoryDetailsActivity;
import com.finance.ui.category.details.CategoryDetailsViewModel;
import com.finance.ui.debit.DebitActivity;
import com.finance.ui.debit.DebitViewModel;
import com.finance.ui.debit.detail.DebitDetailActivity;
import com.finance.ui.debit.detail.DebitDetailViewModel;
import com.finance.ui.debit.update.DebitUpdateActivity;
import com.finance.ui.debit.update.DebitUpdateViewModel;
import com.finance.ui.department.DepartmentActivity;
import com.finance.ui.department.DepartmentViewModel;
import com.finance.ui.department.details.DepartmentDetailActivity;
import com.finance.ui.department.details.DepartmentDetailsViewModel;
import com.finance.ui.document.DocumentActivity;
import com.finance.ui.document.DocumentViewModel;
import com.finance.ui.fragment.account.update.UpdateProfileActivity;
import com.finance.ui.fragment.account.update.UpdateProfileViewModel;
import com.finance.ui.fragment.statistics.detail.StaticsDetailActivity;
import com.finance.ui.fragment.statistics.detail.StatisticsDetailViewModel;
import com.finance.ui.image.ImageActivity;
import com.finance.ui.image.ImageViewModel;
import com.finance.ui.key.details.KeyDetailsActivity;
import com.finance.ui.key.details.KeyDetailsViewModel;
import com.finance.ui.key.filter.KeyFilterActivity;
import com.finance.ui.key.filter.KeyFilterViewModel;
import com.finance.ui.key.group.KeyGroupActivity;
import com.finance.ui.key.group.KeyGroupViewModel;
import com.finance.ui.key.group.details.KeyGroupDetailsActivity;
import com.finance.ui.key.group.details.KeyGroupDetailsViewModel;
import com.finance.ui.key.infor.KeyInfoActivity;
import com.finance.ui.key.infor.KeyInfoViewModel;
import com.finance.ui.login.LoginActivity;
import com.finance.ui.login.LoginViewModel;
import com.finance.ui.main.MainActivity;
import com.finance.ui.main.MainViewModel;
import com.finance.ui.nofication.NotificationActivity;
import com.finance.ui.nofication.NotificationViewModel;
import com.finance.ui.organization.OrganizationActivity;
import com.finance.ui.organization.OrganizationViewModel;
import com.finance.ui.organization.detail.OrganizationDetailActivity;
import com.finance.ui.organization.detail.OrganizationDetailViewModel;
import com.finance.ui.password.change.ChangePasswordActivity;
import com.finance.ui.password.change.ChangePasswordViewModel;
import com.finance.ui.password.forget.ForgetPasswordActivity;
import com.finance.ui.password.forget.ForgetPasswordViewModel;
import com.finance.ui.password.reset.ResetPasswordActivity;
import com.finance.ui.password.reset.ResetPasswordViewModel;
import com.finance.ui.project.ProjectActivity;
import com.finance.ui.project.ProjectViewModel;
import com.finance.ui.project.detail.ProjectDetailActivity;
import com.finance.ui.project.detail.ProjectDetailViewModel;
import com.finance.ui.service.ServiceActivity;
import com.finance.ui.service.ServiceViewModel;
import com.finance.ui.service.detail.ServiceDetailActivity;
import com.finance.ui.service.detail.ServiceDetailViewModel;
import com.finance.ui.service.group.ServiceGroupActivity;
import com.finance.ui.service.group.ServiceGroupViewModel;
import com.finance.ui.service.group.detail.ServiceGroupDetailActivity;
import com.finance.ui.service.group.detail.ServiceGroupDetailViewModel;
import com.finance.ui.service.schedule.ServiceScheduleActivity;
import com.finance.ui.service.schedule.ServiceScheduleViewModel;
import com.finance.ui.subtask.SubTaskActivity;
import com.finance.ui.subtask.SubTaskViewModel;
import com.finance.ui.tag.TagActivity;
import com.finance.ui.tag.TagViewModel;
import com.finance.ui.tag.detail.TagDetailActivity;
import com.finance.ui.tag.detail.TagDetailViewModel;
import com.finance.ui.task.TaskActivity;
import com.finance.ui.task.TaskViewModel;
import com.finance.ui.task.create_or_update.TaskCreateUpdateActivity;
import com.finance.ui.task.create_or_update.TaskCreateUpdateViewModel;
import com.finance.ui.task.detail.TaskDetailActivity;
import com.finance.ui.task.detail.TaskDetailViewModel;
import com.finance.ui.task.filter.TaskFilterActivity;
import com.finance.ui.task.filter.TaskFilterViewModel;
import com.finance.ui.transaction.create_or_update.TransactionCreateUpdateActivity;
import com.finance.ui.transaction.create_or_update.TransactionCreateUpdateViewModel;
import com.finance.ui.transaction.detail.TransactionDetailActivity;
import com.finance.ui.transaction.detail.TransactionDetailViewModel;
import com.finance.ui.transaction.group.TransactionGroupActivity;
import com.finance.ui.transaction.group.TransactionGroupViewModel;
import com.finance.ui.transaction.group.detail.TransactionGroupDetailActivity;
import com.finance.ui.transaction.group.detail.TransactionGroupDetailViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerActivityComponent implements ActivityComponent {
  private final AppComponent appComponent;

  private Provider<Repository> getRepositoryProvider;

  private Provider<Context> getContextProvider;

  private Provider<MainViewModel> provideMainViewModelProvider;

  private Provider<String> provideTokenProvider;

  private Provider<LoginViewModel> provideSignInViewModelProvider;

  private Provider<UpdateProfileViewModel> provideUpdateAccountViewModelProvider;

  private Provider<StatisticsDetailViewModel> provideDetailStatisticsViewModelProvider;

  private Provider<TransactionDetailViewModel> provideDetailTransactionViewModelProvider;

  private Provider<TransactionCreateUpdateViewModel> provideCreateTransactionViewModelProvider;

  private Provider<CategoryViewModel> provideCategoryViewModelProvider;

  private Provider<CategoryDetailsViewModel> provideCategoryDetailsViewModelProvider;

  private Provider<DepartmentViewModel> provideDepartmentViewModelProvider;

  private Provider<DepartmentDetailsViewModel> provideDepartmentDetailsViewModelProvider;

  private Provider<TransactionGroupViewModel> provideGroupTransactionViewModelProvider;

  private Provider<TransactionGroupDetailViewModel> provideGroupTransactionDetailViewModelProvider;

  private Provider<KeyDetailsViewModel> provideKeyDetailsViewModelProvider;

  private Provider<KeyGroupViewModel> provideKeyGroupViewModelProvider;

  private Provider<KeyGroupDetailsViewModel> provideKeyGroupDetailsViewModelProvider;

  private Provider<KeyInfoViewModel> provideKeyInfoViewModelProvider;

  private Provider<ServiceViewModel> provideServiceViewModelProvider;

  private Provider<ServiceDetailViewModel> provideServiceDetailViewModelProvider;

  private Provider<ServiceGroupViewModel> provideGroupServiceViewModelProvider;

  private Provider<ServiceGroupDetailViewModel> provideGroupServiceDetailViewModelProvider;

  private Provider<ForgetPasswordViewModel> provideForgetPasswordViewModelProvider;

  private Provider<ResetPasswordViewModel> provideResetPasswordViewModelProvider;

  private Provider<ChangePasswordViewModel> provideChangePasswordViewModelProvider;

  private Provider<ServiceScheduleViewModel> provideServiceScheduleViewModelProvider;

  private Provider<OrganizationViewModel> provideOrganizationViewModelProvider;

  private Provider<OrganizationDetailViewModel> provideOrganizationDetailViewModelProvider;

  private Provider<NotificationViewModel> provideNotificationViewModelProvider;

  private Provider<ProjectViewModel> provideProjectViewModelProvider;

  private Provider<ProjectDetailViewModel> provideProjectDetailViewModelProvider;

  private Provider<TaskDetailViewModel> provideTaskDetailViewModelProvider;

  private Provider<TaskCreateUpdateViewModel> provideTaskCreateUpdateViewModelProvider;

  private Provider<KeyFilterViewModel> provideKeyFilterViewModelProvider;

  private Provider<TaskFilterViewModel> provideTaskFilterViewModelProvider;

  private Provider<DebitViewModel> provideDebitViewModelProvider;

  private Provider<DebitDetailViewModel> provideDebitDetailViewModelProvider;

  private Provider<DebitUpdateViewModel> provideDebitUpdateViewModelProvider;

  private Provider<SubTaskViewModel> provideSubTaskViewModelProvider;

  private Provider<ImageViewModel> provideImageViewModelProvider;

  private Provider<TaskViewModel> provideTaskViewModelProvider;

  private Provider<DocumentViewModel> provideDocumentViewModelProvider;

  private Provider<TagViewModel> provideTagViewModelProvider;

  private Provider<TagDetailViewModel> provideTagDetailViewModelProvider;

  private DaggerActivityComponent(ActivityModule activityModuleParam,
      AppComponent appComponentParam) {
    this.appComponent = appComponentParam;
    initialize(activityModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ActivityModule activityModuleParam,
      final AppComponent appComponentParam) {
    this.getRepositoryProvider = new com_finance_di_component_AppComponent_getRepository(appComponentParam);
    this.getContextProvider = new com_finance_di_component_AppComponent_getContext(appComponentParam);
    this.provideMainViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideMainViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideTokenProvider = DoubleCheck.provider(ActivityModule_ProvideTokenFactory.create(activityModuleParam, getRepositoryProvider));
    this.provideSignInViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideSignInViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideUpdateAccountViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideUpdateAccountViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideDetailStatisticsViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideDetailStatisticsViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideDetailTransactionViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideDetailTransactionViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideCreateTransactionViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideCreateTransactionViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideCategoryViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideCategoryViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideCategoryDetailsViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideCategoryDetailsViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideDepartmentViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideDepartmentViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideDepartmentDetailsViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideDepartmentDetailsViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideGroupTransactionViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideGroupTransactionViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideGroupTransactionDetailViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideGroupTransactionDetailViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideKeyDetailsViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideKeyDetailsViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideKeyGroupViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideKeyGroupViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideKeyGroupDetailsViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideKeyGroupDetailsViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideKeyInfoViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideKeyInfoViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideServiceViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideServiceViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideServiceDetailViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideServiceDetailViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideGroupServiceViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideGroupServiceViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideGroupServiceDetailViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideGroupServiceDetailViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideForgetPasswordViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideForgetPasswordViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideResetPasswordViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideResetPasswordViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideChangePasswordViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideChangePasswordViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideServiceScheduleViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideServiceScheduleViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideOrganizationViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideOrganizationViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideOrganizationDetailViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideOrganizationDetailViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideNotificationViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideNotificationViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideProjectViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideProjectViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideProjectDetailViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideProjectDetailViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideTaskDetailViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideTaskDetailViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideTaskCreateUpdateViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideTaskCreateUpdateViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideKeyFilterViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideKeyFilterViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideTaskFilterViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideTaskFilterViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideDebitViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideDebitViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideDebitDetailViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideDebitDetailViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideDebitUpdateViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideDebitUpdateViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideSubTaskViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideSubTaskViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideImageViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideImageViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideTaskViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideTaskViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideDocumentViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideDocumentViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideTagViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideTagViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
    this.provideTagDetailViewModelProvider = DoubleCheck.provider(ActivityModule_ProvideTagDetailViewModelFactory.create(activityModuleParam, getRepositoryProvider, getContextProvider));
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  @Override
  public void inject(LoginActivity activity) {
    injectLoginActivity(activity);
  }

  @Override
  public void inject(UpdateProfileActivity activity) {
    injectUpdateProfileActivity(activity);
  }

  @Override
  public void inject(StaticsDetailActivity activity) {
    injectStaticsDetailActivity(activity);
  }

  @Override
  public void inject(TransactionDetailActivity activity) {
    injectTransactionDetailActivity(activity);
  }

  @Override
  public void inject(TransactionCreateUpdateActivity activity) {
    injectTransactionCreateUpdateActivity(activity);
  }

  @Override
  public void inject(CategoryActivity categoryActivity) {
    injectCategoryActivity(categoryActivity);
  }

  @Override
  public void inject(CategoryDetailsActivity categoryDetailsActivity) {
    injectCategoryDetailsActivity(categoryDetailsActivity);
  }

  @Override
  public void inject(DepartmentActivity departmentActivity) {
    injectDepartmentActivity(departmentActivity);
  }

  @Override
  public void inject(DepartmentDetailActivity departmentDetailActivity) {
    injectDepartmentDetailActivity(departmentDetailActivity);
  }

  @Override
  public void inject(TransactionGroupActivity activity) {
    injectTransactionGroupActivity(activity);
  }

  @Override
  public void inject(TransactionGroupDetailActivity activity) {
    injectTransactionGroupDetailActivity(activity);
  }

  @Override
  public void inject(KeyDetailsActivity keyDetailsActivity) {
    injectKeyDetailsActivity(keyDetailsActivity);
  }

  @Override
  public void inject(KeyGroupActivity keyGroupActivity) {
    injectKeyGroupActivity(keyGroupActivity);
  }

  @Override
  public void inject(KeyGroupDetailsActivity keyGroupDetailsActivity) {
    injectKeyGroupDetailsActivity(keyGroupDetailsActivity);
  }

  @Override
  public void inject(KeyInfoActivity keyInfoActivity) {
    injectKeyInfoActivity(keyInfoActivity);
  }

  @Override
  public void inject(ServiceActivity activity) {
    injectServiceActivity(activity);
  }

  @Override
  public void inject(ServiceDetailActivity activity) {
    injectServiceDetailActivity(activity);
  }

  @Override
  public void inject(ServiceGroupActivity activity) {
    injectServiceGroupActivity(activity);
  }

  @Override
  public void inject(ServiceGroupDetailActivity activity) {
    injectServiceGroupDetailActivity(activity);
  }

  @Override
  public void inject(ForgetPasswordActivity forgetPasswordActivity) {
    injectForgetPasswordActivity(forgetPasswordActivity);
  }

  @Override
  public void inject(ResetPasswordActivity resetPasswordActivity) {
    injectResetPasswordActivity(resetPasswordActivity);
  }

  @Override
  public void inject(ChangePasswordActivity changePasswordActivity) {
    injectChangePasswordActivity(changePasswordActivity);
  }

  @Override
  public void inject(ServiceScheduleActivity activity) {
    injectServiceScheduleActivity(activity);
  }

  @Override
  public void inject(OrganizationActivity groupActivity) {
    injectOrganizationActivity(groupActivity);
  }

  @Override
  public void inject(OrganizationDetailActivity organizationDetailActivity) {
    injectOrganizationDetailActivity(organizationDetailActivity);
  }

  @Override
  public void inject(NotificationActivity activity) {
    injectNotificationActivity(activity);
  }

  @Override
  public void inject(ProjectActivity activity) {
    injectProjectActivity(activity);
  }

  @Override
  public void inject(ProjectDetailActivity activity) {
    injectProjectDetailActivity(activity);
  }

  @Override
  public void inject(TaskDetailActivity activity) {
    injectTaskDetailActivity(activity);
  }

  @Override
  public void inject(TaskCreateUpdateActivity activity) {
    injectTaskCreateUpdateActivity(activity);
  }

  @Override
  public void inject(KeyFilterActivity activity) {
    injectKeyFilterActivity(activity);
  }

  @Override
  public void inject(TaskFilterActivity activity) {
    injectTaskFilterActivity(activity);
  }

  @Override
  public void inject(DebitActivity activity) {
    injectDebitActivity(activity);
  }

  @Override
  public void inject(DebitDetailActivity activity) {
    injectDebitDetailActivity(activity);
  }

  @Override
  public void inject(DebitUpdateActivity activity) {
    injectDebitUpdateActivity(activity);
  }

  @Override
  public void inject(SubTaskActivity activity) {
    injectSubTaskActivity(activity);
  }

  @Override
  public void inject(ImageActivity activity) {
    injectImageActivity(activity);
  }

  @Override
  public void inject(TaskActivity activity) {
    injectTaskActivity(activity);
  }

  @Override
  public void inject(DocumentActivity activity) {
    injectDocumentActivity(activity);
  }

  @Override
  public void inject(TagActivity activity) {
    injectTagActivity(activity);
  }

  @Override
  public void inject(TagDetailActivity activity) {
    injectTagDetailActivity(activity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideMainViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private LoginActivity injectLoginActivity(LoginActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideSignInViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private UpdateProfileActivity injectUpdateProfileActivity(UpdateProfileActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideUpdateAccountViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private StaticsDetailActivity injectStaticsDetailActivity(StaticsDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideDetailStatisticsViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TransactionDetailActivity injectTransactionDetailActivity(
      TransactionDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideDetailTransactionViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TransactionCreateUpdateActivity injectTransactionCreateUpdateActivity(
      TransactionCreateUpdateActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideCreateTransactionViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private CategoryActivity injectCategoryActivity(CategoryActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideCategoryViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private CategoryDetailsActivity injectCategoryDetailsActivity(CategoryDetailsActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideCategoryDetailsViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private DepartmentActivity injectDepartmentActivity(DepartmentActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideDepartmentViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private DepartmentDetailActivity injectDepartmentDetailActivity(
      DepartmentDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideDepartmentDetailsViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TransactionGroupActivity injectTransactionGroupActivity(
      TransactionGroupActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideGroupTransactionViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TransactionGroupDetailActivity injectTransactionGroupDetailActivity(
      TransactionGroupDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideGroupTransactionDetailViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private KeyDetailsActivity injectKeyDetailsActivity(KeyDetailsActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideKeyDetailsViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private KeyGroupActivity injectKeyGroupActivity(KeyGroupActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideKeyGroupViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private KeyGroupDetailsActivity injectKeyGroupDetailsActivity(KeyGroupDetailsActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideKeyGroupDetailsViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private KeyInfoActivity injectKeyInfoActivity(KeyInfoActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideKeyInfoViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ServiceActivity injectServiceActivity(ServiceActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideServiceViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ServiceDetailActivity injectServiceDetailActivity(ServiceDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideServiceDetailViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ServiceGroupActivity injectServiceGroupActivity(ServiceGroupActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideGroupServiceViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ServiceGroupDetailActivity injectServiceGroupDetailActivity(
      ServiceGroupDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideGroupServiceDetailViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ForgetPasswordActivity injectForgetPasswordActivity(ForgetPasswordActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideForgetPasswordViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ResetPasswordActivity injectResetPasswordActivity(ResetPasswordActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideResetPasswordViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ChangePasswordActivity injectChangePasswordActivity(ChangePasswordActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideChangePasswordViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ServiceScheduleActivity injectServiceScheduleActivity(ServiceScheduleActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideServiceScheduleViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private OrganizationActivity injectOrganizationActivity(OrganizationActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideOrganizationViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private OrganizationDetailActivity injectOrganizationDetailActivity(
      OrganizationDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideOrganizationDetailViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private NotificationActivity injectNotificationActivity(NotificationActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideNotificationViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ProjectActivity injectProjectActivity(ProjectActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideProjectViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ProjectDetailActivity injectProjectDetailActivity(ProjectDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideProjectDetailViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TaskDetailActivity injectTaskDetailActivity(TaskDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideTaskDetailViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TaskCreateUpdateActivity injectTaskCreateUpdateActivity(
      TaskCreateUpdateActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideTaskCreateUpdateViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private KeyFilterActivity injectKeyFilterActivity(KeyFilterActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideKeyFilterViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TaskFilterActivity injectTaskFilterActivity(TaskFilterActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideTaskFilterViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private DebitActivity injectDebitActivity(DebitActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideDebitViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private DebitDetailActivity injectDebitDetailActivity(DebitDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideDebitDetailViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private DebitUpdateActivity injectDebitUpdateActivity(DebitUpdateActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideDebitUpdateViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private SubTaskActivity injectSubTaskActivity(SubTaskActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideSubTaskViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private ImageActivity injectImageActivity(ImageActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideImageViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TaskActivity injectTaskActivity(TaskActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideTaskViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private DocumentActivity injectDocumentActivity(DocumentActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideDocumentViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TagActivity injectTagActivity(TagActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideTagViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  private TagDetailActivity injectTagDetailActivity(TagDetailActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, provideTagDetailViewModelProvider.get());
    BaseActivity_MembersInjector.injectApplication(instance, Preconditions.checkNotNullFromComponent(appComponent.getContext()));
    BaseActivity_MembersInjector.injectToken(instance, provideTokenProvider.get());
    return instance;
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public ActivityComponent build() {
      Preconditions.checkBuilderRequirement(activityModule, ActivityModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerActivityComponent(activityModule, appComponent);
    }
  }

  private static final class com_finance_di_component_AppComponent_getRepository implements Provider<Repository> {
    private final AppComponent appComponent;

    com_finance_di_component_AppComponent_getRepository(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Repository get() {
      return Preconditions.checkNotNullFromComponent(appComponent.getRepository());
    }
  }

  private static final class com_finance_di_component_AppComponent_getContext implements Provider<Context> {
    private final AppComponent appComponent;

    com_finance_di_component_AppComponent_getContext(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNullFromComponent(appComponent.getContext());
    }
  }
}
