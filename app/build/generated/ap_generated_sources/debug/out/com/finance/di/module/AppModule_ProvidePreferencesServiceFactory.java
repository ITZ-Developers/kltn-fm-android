// Generated by Dagger (https://dagger.dev).
package com.finance.di.module;

import com.finance.data.prefs.AppPreferencesService;
import com.finance.data.prefs.PreferencesService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidePreferencesServiceFactory implements Factory<PreferencesService> {
  private final AppModule module;

  private final Provider<AppPreferencesService> appPreferencesServiceProvider;

  public AppModule_ProvidePreferencesServiceFactory(AppModule module,
      Provider<AppPreferencesService> appPreferencesServiceProvider) {
    this.module = module;
    this.appPreferencesServiceProvider = appPreferencesServiceProvider;
  }

  @Override
  public PreferencesService get() {
    return providePreferencesService(module, appPreferencesServiceProvider.get());
  }

  public static AppModule_ProvidePreferencesServiceFactory create(AppModule module,
      Provider<AppPreferencesService> appPreferencesServiceProvider) {
    return new AppModule_ProvidePreferencesServiceFactory(module, appPreferencesServiceProvider);
  }

  public static PreferencesService providePreferencesService(AppModule instance,
      AppPreferencesService appPreferencesService) {
    return Preconditions.checkNotNullFromProvides(instance.providePreferencesService(appPreferencesService));
  }
}
